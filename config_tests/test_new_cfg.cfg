medium =
(
        {
                # required >= 0 ou < 0
                id = 0;
                # required len >= 0
                interfaces = ["00:00:00:00:00:00", "00:00:00:00:00:01"];
                model = 
                {
                        type = "prob";
                        default_probability = 1.0;
                        links =
                        (
                                # (transmitter, receiver, error probability)
                                (0, 1, 0.1),
                                (1, 0, 0.2)
                        );
                }
        },
        {
                id = 1;
                interfaces = ["00:00:00:00:00:02", "00:00:00:00:00:03"];
                model = 
                {
                        type = "snr";
                        links =
                        (
                                (0, 1, 20),
                                (1, 0, 25),
                        );
                }
        },
        {
                id = 2;
                interfaces = ["00:00:00:00:00:04", "00:00:00:00:00:05"];
                model = 
                {
                        type = "snr";
                        links =
                        (
                                # (transmitter, receiver, signal at recv - dBm)
                                (0, 1, 20),
                                (1, 0, 15),
                        );
                        # check if model.type = path_loss
                        simulate_interference = true;
                        noise_level = -91; # dBm (int < 0)
                        fading_coefficient = 1; # (int > 0)
                        # check if model.type = prob
                        default_probability = 0.2; #(float - [0.0, 1.0])
                        # check if model.type = snr
                        default_snr = 10;
                        # check if model.type = path_loss. required
                        positions = ((2.0, 3.0, 8.0), (4.0, 5.0, 0.0));
                        # check if model.type = path_loss. optional
                        directions = ((2.0, 3.0, 0.0), (5.0, 1.0, 0.0));
                        # check if model.type = path_loss. required
                        tx_powers = [15, 20]; # int
                        # only for model.type = path_loss. required
                        model_name = "free_space"; # string
                        # parameters of model .model_name
                        model_params =
                        {
                                # log_distance, log_normal_shadowing
                                path_loss_exponent = 0.1; # float
                                # log_distance
                                xg = 1.0; # float
                                # free_space, log_normal_shadowing, two_ray_ground
                                system_loss = 1; # int
                                # itu
                                n_floors = 2; # int - >=0 ou > 0?
                                # itu - floor penetration factor
                                # floor_pen_factor * n_floors
                                floor_pen_factor = 22; # int dBm
                                # itu - distance power loss coefficient (N)
                                power_loss_coefficient = 1; #int
                        };
                        unknown = "warning";

                }
        },
               {
                id = 3;
                interfaces = ["00:00:00:00:00:06", "00:00:00:00:00:06"];
                model = 
                {
                        type = "path_loss";
                        links =
                        (
                                # (transmitter, receiver, signal at recv - dBm)
                                (0, 1, 20),
                                (1, 0, 15),
                        );
                        # check if model.type = path_loss
                        simulate_interference = true;
                        noise_level = -91; # dBm (int < 0)
                        fading_coefficient = 1; # (int > 0)
                        # check if model.type = prob
                        default_probability = 0.2; #(float - [0.0, 1.0])
                        # check if model.type = snr
                        default_snr = 10;
                        # check if model.type = path_loss. required
                        positions = ((20, 30, 80), (40, 50, 0));
                        # check if model.type = path_loss. optional
                        directions = ((20, 30, 0), (50, 10, 0));
                        # check if model.type = path_loss. required
                        tx_powers = [15, 20]; # int
                        # only for model.type = path_loss. required
                        #model_name = "free_space"; # string
                        model_name = "log_distance";
                        # parametros do modelo .model_name
                        model_params =
                        {
                                # log_distance, log_normal_shadowing
                                path_loss_exponent = 0.1; # float
                                # log_distance - FIXME xg??
                                xg = 1.0; # float
                                # free_space, log_normal_shadowing, two_ray_ground
                                system_loss = 1; # int
                                # itu
                                n_floors = 2; # int - >=0 ou > 0?
                                # itu - floor penetration factor
                                # floor_pen_factor * n_floors
                                #floor_pen_factor = 22; # int dBm
                                # itu - distance power loss coefficient (N)
                                power_loss_coefficient = 1; #int - what is it?
                        };
                        unknown = "warning";

                }
        },
);

cage = 1; # unknown setting warning
