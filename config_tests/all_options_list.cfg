medium =
(
  {
    # required
    id = 2;
    # required
    interfaces = ["00:00:00:00:00:00",
                  "00:00:00:00:00:01",
                  "00:00:00:00:00:02",
                  "00:00:00:00:00:03"];
    # required
    model = 
    {
      # required
      type = "prob";
      # optional - (default_probability = 1.0)
      # probability defines the ERROR probability
      default_probability = 0.5; # for the other interfaces
      # optional - all missing pairs have default_probability
      links =
      (#(transmitter, receiver, error probability)
        (0, 1, 0.1),
        (1, 0, 0.2),
        (2, 0, 0.005),
        (1, 3, 0.001)
      );
    }
  },

  {
    # required
    id = 1;
    # required
    interfaces = ["00:00:00:00:00:04",
                  "00:00:00:00:00:05",
                  "00:00:00:00:00:06"];
    # required
    model = 
    {
      # required
      type = "snr";
      # optional - default_snr = -100
      default_snr = 110;
      # optional - all missing pairs have default_snr
      links =
      (#(transmitter, receiver, receiver signal)
        (0, 1, 110),
        (1, 0, 110),
        (1, 2, 50)
      );
    }
  },
  {
    # required
    id = 3;
    # required
    interfaces = ["00:00:00:00:00:07",
                  "00:00:00:00:00:08",
                  "00:00:00:00:00:09",
                  "00:00:00:00:00:0a"];
    # required
    model = 
    {
      # required
      type = "path_loss";
      # optional - simulate_interference = false;
      simulate_interference = true;
      # optional - noise_level = -91 
      noise_level = -91; # dBm
      # optional - fading_coefficient = 0
      fading_coefficient = 1;
      # required - (x,y,z). z for two_ray is antenna height
      # units: meters
      positions = ((2.0, 3.0, 8.0), (4.0, 5.0, 0.0),
                   (1.0, 1.0, 0.0), (2.3, 5.1, 1.3));
      # optional (seconds > 0) move_interval = 5.0
      move_interval = 1.0;
      # optional. every move_interval: position += direction
      directions = ((2.0, 3.0, 2.0), (5.0, 1.0, 1.0),
                    (0.0, 0.0, 0.0), (1.0, 0.0, 0.0));
      # required
      tx_powers = [15, 20, 10, 30]; # int
      # optional antenna_gain = 0
      antenna_gain = [3, 3, 5, 8]; # int - dBm
      # required: free_space | itu | log_distance | 
      #           log_normal_shadowing | two_ray_ground 
      # model_name = "free_space"; # string
      # model_name = "log_distance";
      # model_name = "log_normal_shadowing";
      model_name = "two_ray_ground";
      # model_name = "itu";
      # required - model_name parameters
      # model_params = # free_space
      # {
      #   system_loss = 1; # int
      # }
      # model_params = # log_distance
      # {
      #   path_loss_exponent = 0.1; # float
      #   xg = 1.0; # float
      # }
      # model_params = # log_normal_shadowing
      # {
      #   path_loss_exponent = 0.1; # float
      #   system_loss = 1; # int
      # }
      model_params = # two_ray_ground
      {
        system_loss = 1; # int
      }
      # model_params = # itu
      # {
      #   n_floors = 0; # int 
      # # floor penetration factor
      # # floor_pen_factor * n_floors
      #   floor_pen_factor = 22; # int dBm
      # # distance power loss coefficient (N)
      #   power_loss_coefficient = 1; #int
      # }
    }
  }
);

